class SCC{
public:
    vector<vector<int>> adj, adj_rev, adj_scc;
    vector<int> order, component, roots, root_nodes;
    vector<bool> used;

    void dfs1(int v){
        used[v] = true;
        for(int u: adj[v]){
            if(!used[u]) dfs1(u);
        }

        order.push_back(v);
    }

    void dfs2(int v){
        used[v] = true;
        component.push_back(v);

        for(int u: adj_rev[v]){
            if(!used[u]) dfs2(u);
        }
    }

    SCC(int n, vector<vector<int>> g){
        adj = g;
        adj_rev.assign(n, {});
        adj_scc.assign(n, {});
        roots.assign(n, -1);

        for(int v = 0; v < n; v++){
            for(int u: adj[v]){
                adj_rev[u].push_back(v);
            }
        }

        used.assign(n, false);
        for(int u = 0; u < n; u++){
            if(!used[u]) dfs1(u);
        }
        reverse(order.begin(), order.end());
        
        used.assign(n, false);
        for(int v: order){
            if(!used[v]){
                dfs2(v);

                int root = component.front();
                for(int u: component){
                    roots[u] = root;
                }

                root_nodes.push_back(root);
                component.clear();
            }
        }

        for(int v = 0; v < n; v++){
            for(int u: adj[v]){
                int root_u = roots[u], root_v = roots[v];

                if(root_u != root_v){
                    adj_scc[root_v].push_back(root_u);
                }
            }
        }
    }
};