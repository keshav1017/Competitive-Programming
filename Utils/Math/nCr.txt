class nCrCalculator{
private:
    int N; 
    int mod;
    vector<int> fact; 
    vector<int> inv; 

public:
    nCrCalculator(int maxN, int modulo){
        N = maxN;
        mod = modulo;
        fact.resize(N + 1);
        inv.resize(N + 1);

        fact[0] = 1;
        for (int i = 1; i <= N; ++i){
            fact[i] = (fact[i - 1] * i) % mod;
        }

        inv[N] = power(fact[N], mod - 2); 
        for (int i = N - 1; i >= 0; --i){
            inv[i] = (inv[i + 1] * (i + 1)) % mod; 
        }
    }

    int power(int a, int b){
        int res = 1;
        while (b) {
            if (b & 1) res = (res * a) % mod;
            a = (a * a) % mod;
            b >>= 1;
        }
        return res;
    }

    int nCr(int n, int r){
        if (r > n) return 0; 
        return (fact[n] * inv[r] % mod * inv[n - r] % mod) % mod;
    }
};

int power(int a, int b){
    int res = 1;
    while (b) {
        if (b & 1) res = (res * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return res;
}

ll binex(ll a , ll b , ll mod)
{
	a %= mod;
 
	ll result = 1;
	b = b % (MOD-1);
	while(b > 0)
	{
		if(b%2 == 1)
			result = (result%mod * a%mod)%mod ;
		a = (a%mod*a%mod)%mod;
		b = b/2;
	}
	return result;
}
 
 
ll modinv(ll a, ll p)
{
	return (binex(a , p-2 , p) );
}
